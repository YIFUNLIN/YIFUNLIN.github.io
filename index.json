[{"categories":["技術學習","Cloud Native"],"contents":"在了解了 Kubernetes 的基礎架構後，這次我們來探討一個建立在其之上的強大 Serverless 框架：Knative。它將開發者從繁瑣的基礎設施管理中解放出來，專注於程式碼本身。\n什麼是 Knative？ Knative 是一個開源的 Kubernetes 附加元件 (Add-on)，用於建構、部署和管理現代化的 Serverless 工作負載。它並非要取代 Kubernetes，而是擴展 Kubernetes，提供了一組更高階的抽象化原語 (Primitives)，旨在標準化和簡化 Serverless 應用程式的開發與部署流程。\n其核心價值主張是：讓開發者只關心業務邏輯，而將服務的自動擴展 (Auto-scaling)、網路路由和事件觸發等複雜性交給平台處理。\nKnative 的核心組件 Knative 主要由兩個獨立且可插拔的核心組件構成：\n1. Serving (服務供給) Knative Serving 的目標是部署和服務 Serverless 應用程式和函式。它最引人注目的特性是請求驅動 (Request-Driven) 的計算模型，能夠根據流量需求自動擴展 Pod 數量，甚至在沒有流量時縮容至零 (Scale to Zero)，從而極大地節省了運算資源成本。\n主要特性：\n快速部署與版本管理: 每次對應用程式的程式碼或配置進行更改時，都會創建一個不可變的修訂版本 (Revision)，方便進行版本追蹤和快速回滾。 流量分割 (Traffic Splitting): 能夠精確控制流向不同修訂版本的流量比例，輕鬆實現金絲雀部署 (Canary Deployments) 和藍綠部署 (Blue/Green Deployments)。 基於請求的自動擴展: 內建 KPA (Knative Pod Autoscaler) 元件，可根據每秒處理的併發請求數來自動增減 Pod 實例。 核心資源 (CRDs):\nService (ksvc): 這是開發者主要操作的頂層資源，它自動管理一個應用的 Route 和 Configuration，簡化了部署流程。 Route: 負責將網路端點 (URL) 映射到一個或多個 Revision，並定義流量分配策略。 Configuration: 定義了應用程式的期望狀態，包括容器映像檔、環境變數等。每次 Configuration 的變更都會觸發一個新的 Revision。 Revision: Configuration 的一個不可變的時間點快照。每個 Revision 都代表了一份特定的程式碼和配置組合。 2. Eventing (事件驅動) Knative Eventing 提供了一套標準化的基礎設施，用於建構事件驅動架構。它旨在實現服務間的鬆耦合 (Loosely Coupled)，讓事件的生產者 (Producers) 和消費者 (Consumers) 彼此獨立，無需直接感知對方的存在。\n工作流程： 它採用了發布/訂閱 (Publish/Subscribe) 模型，事件從來源 (Source) 進入系統，被發送到一個稱為代理 (Broker) 的事件中心，然後觸發器 (Trigger) 根據過濾規則將事件分發給一個或多個目標消費者 (Sink)。\n核心資源 (CRDs):\nSource: 將外部系統的事件導入 Knative 的橋樑。例如，ApiServerSource 可以監聽 Kubernetes API 事件，KafkaSource 可以從 Kafka 主題中拉取訊息。 Broker: 作為事件的匯集中心和訊息通道，接收事件並將其暫存，等待分發。 Trigger: 將 Broker 與事件消費者連接起來，並可以定義過濾規則 (Filter)，只有符合條件的事件才會被傳遞給目標。 Sink: 事件的最終目的地，可以是任何可接收 HTTP 請求的資源，最常見的就是一個 Knative Service。 Knative 與 Kubernetes 的關係 理解它們的關係至關重要：Knative 將 Kubernetes 的能力進行了封裝和簡化。\n當您創建一個 Knative Service 時，Knative 的控制器 (Controller) 會在背景將這個高階定義轉換成一系列底層的 Kubernetes 資源，例如：\nDeployment: 用於管理 Pod。 Service (K8s Service): 用於叢集內部網路。 Ingress: 用於外部流量接入。 HorizontalPodAutoscaler (HPA): 用於標準的 CPU/記憶體擴展。 Knative Pod Autoscaler (KPA): 用於基於請求的擴展。 開發者只需維護一份簡單的 Knative YAML 文件，Knative 就會自動處理這些複雜的底層資源配置和生命週期管理。\nKnative 的依賴與生態 服務網格 (Service Mesh): Knative Serving 的許多進階網路功能（如流量分割）依賴於底層的服務網格，例如 Istio, Linkerd, 或 Contour。Istio 是最常見的選擇。 CI/CD (持續整合/持續部署): Knative 最初的 Build 組件已被獨立出來，發展成為一個更通用的 CI/CD 專案 Tekton。Tekton 專注於在 Kubernetes 上構建、測試和部署應用，與 Knative 能夠完美整合。 總結：為何要用 Knative？ 提升開發者體驗: 將基礎設施複雜性抽象化，讓開發者能更專注於業務邏輯。 極致的成本效益: 「縮容至零」特性確保閒置的應用不消耗任何計算資源。 標準化與可移植性: 基於 Kubernetes，不被任何雲端廠商鎖定，可在任何標準的 K8s 叢集上運行。 強大的事件驅動能力: 為構建現代化的異步、鬆耦合微服務架構提供了堅實的基礎。 總之，Knative 結合了 Serverless 的簡易性、事件驅動的靈活性以及 Kubernetes 的強大功能和可控性，是雲端原生時代下構建現代化應用的理想平台。\n","permalink":"https://yifunlin.github.io/blog/knative/","tags":["Knative","Serverless","K8s","Event-Driven"],"title":"Knative 深度解析：在 Kubernetes 上實現 Serverless"},{"categories":["技術學習"],"contents":"今天要分享的是我先前整理的 Kubernetes (K8s) 入門筆記，希望能幫助大家快速上手這個強大的容器編排工具。\nK8s 核心元件 Node: 一個 Node 就是一台實體伺服器或虛擬機，是 K8s 工作負載的運行基礎，可運行一個或多個 Pod。\nPod: K8s 中最小的調度和部署單位。它為一個或多個容器提供了一個共享的運行環境，包含共享的儲存（Volumes）和網路資源。雖然一個 Pod 可以包含多個容器，但通常情況下一個 Pod 只運行一個主容器。\nSidecar: 這是一種將主容器和輔助容器放在同一個 Pod 中的模式。Sidecar 容器用來擴展或增強主容器的功能，例如日誌收集、監控、配置管理等，而不需要修改主應用程式的程式碼。\nService (svc): 將一組 Pod 封裝成一個單一且穩定的服務端點。Service 提供了一個統一的入口來訪問這組 Pod，並具備負載平衡的功能。它可以分為對內的 ClusterIP 服務和對外的 NodePort、LoadBalancer 服務。\nIngress: 作為叢集內服務的對外入口，負責管理從外部訪問叢集內部服務的規則。透過 Ingress，您可以配置不同的 HTTP/HTTPS 路由規則，將外部請求根據域名或路徑轉發到叢集內不同的 Service 上。\nConfigMap 和 Secret: 用於將配置資訊和敏感資料（如密碼、API 金鑰）與應用程式映像檔解耦。這使得配置的修改不需要重新編譯和部署應用程式，提高了靈活性和安全性。\nVolume: 解決了容器內數據持久化的問題。它可以將數據掛載到本地磁碟或遠端儲存空間（如 NFS、Ceph 或雲端儲存），確保即使 Pod 重啟或被刪除，數據依然存在。\nDeployment 和 StatefulSet:\nDeployment: 用於部署和管理「無狀態」應用程式。它能管理 Pod 和 ReplicaSet，並提供副本控制、滾動更新（rolling update）和回滾（rollback）等功能，以實現高可用性。 StatefulSet: 用於部署和管理「有狀態」應用程式（如資料庫）。它能確保 Pod 擁有穩定且唯一的網路標識符和持久化儲存，並保證部署和擴展的順序性。 K8s 架構：Master-Worker K8s 採用 Master-Worker (或稱 Control Plane-Node) 的架構。\nWorker Node (工作節點) 架構 每個 Worker Node 都包含三個核心組件：\nContainer Runtime: 運行容器的基礎軟體，負責拉取容器映像檔、創建、啟動和停止容器。常見的 Runtime 有 Docker、containerd 和 CRI-O。 Kubelet: 每個節點上的代理程式，負責管理該節點上的 Pod，確保容器按照 Pod 的規格（PodSpec）運行。它會定期與 API Server 通信，接收指令並回報節點狀態。 Kube-proxy: 負責為 Service 提供網路代理和負載平衡。它會在每個節點上維護網路規則，將發往 Service 的流量高效地路由到後端正確的 Pod 中。 Master Node (控制平面) 架構 Master Node 是 K8s 叢集的大腦，負責管理和決策，主要由以下四個元件組成：\nkube-apiserver: K8s 的 API 伺服器，是整個叢集的統一入口。所有元件之間的通信都通過 API Server 進行。它負責處理 REST 請求、驗證和處理數據，並將結果存儲到 etcd 中。同時，它也負責認證、授權和訪問控制。\netcd: 一個高可用的鍵值（Key-Value）儲存系統，用於保存整個叢集的所有狀態數據，例如 Pod、Service、Node 的配置和狀態資訊。etcd 是叢集的單一事實來源（single source of truth），是整個系統的數據儲存中心。\nScheduler (調度器): 負責監控新創建的 Pod，並根據資源需求、策略和限制，將它們分配到最合適的 Worker Node 上運行。\nController Manager (控制器管理器): 運行多個控制器進程，這些控制器負責監控叢集狀態，並努力將當前狀態驅動到期望狀態。例如，當一個 Node 故障時，Node Controller 會及時發現並處理；當 Deployment 的副本數不足時，Replication Controller 會啟動新的 Pod。\nCloud Controller Manager (雲端控制器管理器): (可選) 如果您在雲端供應商（如 GCP, AWS, Azure）上運行 K8s，這個組件會負責與雲端平台的 API 進行交互，管理雲端特有的資源，如負載平衡器、儲存卷等。\nDeployment 與 ReplicaSet 的關係 在 K8s 中，我們通常不直接操作 Pod 或 ReplicaSet，而是通過更高層級的 Deployment 來管理。\nDeployment \u0026ndash;(管理)\u0026ndash;\u0026gt; ReplicaSet \u0026ndash;(管理)\u0026ndash;\u0026gt; Pod\nReplicaSet: 確保在任何時候都有指定數量的 Pod 副本在運行。 Deployment: 管理 ReplicaSet 的版本和更新。當您更新 Deployment 的配置時（例如，更新容器映像檔），它會創建一個新的 ReplicaSet，並以滾動更新的方式逐步將 Pod 從舊版本遷移到新版本，實現平滑升級。 我們只需要定義期望的狀態（例如，\u0026ldquo;我需要這個應用程式的3個副本運行最新版本\u0026rdquo;），K8s 就會自動完成所有底層的創建、更新和管理工作。\nService 的其他類型 除了常見的 NodePort，Service 還有其他類型：\nLoadBalancer: 將服務暴露到外部的雲端負載平衡器上，通常在雲端環境中使用。 ExternalName: 將服務通過 CNAME 記錄映射到一個外部域名，用於在叢集內部訪問外部服務。 Headless: 不會分配 ClusterIP，主要用於服務發現，允許您直接解析到後端所有 Pod 的 IP 地址。 K3s \u0026amp; Minikube K3s: 一個輕量級、經過 CNCF 認證的 Kubernetes 發行版，適用於邊緣計算、物聯網和資源受限的環境。 Minikube: 一個可以在本地輕鬆運行單節點 Kubernetes 叢集的工具，非常適合學習和開發測試。 學習資源 30 分鐘 Docker 入門\n這部影片介紹了 Docker 的核心概念，包括它與傳統虛擬機的區別，以及鏡像（Image）、容器（Container）和倉庫（Repository）等關鍵元素。影片還通過一個 Node.js 應用程式實例，演示了如何編寫 Dockerfile、構建鏡像和運行容器，並介紹了 Docker Compose 在多容器應用管理中的應用。 Kubernetes 一小時輕鬆入門\n這部影片旨在幫助初學者快速掌握 K8s 的核心概念和架構，包括 Node、Pod、Service 等。影片詳細介紹了 Master-Worker 架構中各組件的功能，並指導如何使用 Minikube 或 K3s 在本地搭建環境，以及 kubectl 的基本操作。 Ithome 鐵人賽好文：入門 Kubernetes 到考取 CKA 證照\n這是一系列非常詳盡的部落格文章，從基礎概念到實戰操作，內容涵蓋廣泛，是深入學習 K8s 並準備 CKA 認證的絕佳資源。 http://googleusercontent.com/youtube_content/0 http://googleusercontent.com/youtube_content/1\n","permalink":"https://yifunlin.github.io/blog/k8s/","tags":["Kubernetes","K8s","Docker","DevOps","雲端原生"],"title":"Kubernetes (K8s) 入門筆記"},{"categories":["Web Design"],"contents":"演講 訪談內容 雖然那時候才剛加入 LINE 三個月，但很榮幸有這個機會來分享！ 也很榮幸有機會能夠被訪談！\n","permalink":"https://yifunlin.github.io/blog/tech_fresh/","tags":["Photos","Game","React","Python","New"],"title":"2025 LINE Tech Fresh 畢業分享會"}]